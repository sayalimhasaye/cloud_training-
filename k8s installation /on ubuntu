-----------------------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************************************************************************************************************************
KUBERNETES INSTALLATION FOR UBUNTU 20.04
https://www.linkedin.com/pulse/install-kubernetes-cluster-ubuntu-kubeadm-abhishek-rana
https://github.com/kharatramesh/misalpav/tree/main/terraform/installk8sonubuntu
************************************************************************************************************************************************************************************************************************************
-----------------------------------------------------------------------------------------------------------------------------------------


installation on ubuntu
===============================================================================
https://www.letscloud.io/community/how-to-install-kubernetesk8s-and-docker-on-ubuntu-2004
https://github.com/kharatramesh/misalpav/blob/main/terraform/installk8sonubuntu/k8s.txt
---------------------------------------
first, make dns entries to all m/c
---------------------------------------
prerequisite:
  swapoff -a 
  firewall disable 

sudo vi etc/hosts 
---------------------------------
#ip master1
10.48.70.239 master1
10.48.70.247 master2
10.48.70.240 master3
10.48.70.224 worker1
10.48.70.222 worker2
-------------------------------
vi /etc/resolv.conf
---------------------------
#nameserver <dns-name>
nameserver 10.48.70.221
---------------------------
========================================================================================================
step1:  Update Ubuntu

sudo apt update
sudo apt upgrade
========================================================================================================
Step 2 - Install Docker

sudo apt install docker.io
docker ––version
=======================================================================================================
Step 3 - Start and Enable Docker

sudo systemctl enable docker
sudo systemctl start docker

Verify Docker is running:
sudo systemctl status docker

To start Docker if it’s not running:
sudo systemctl start docker
=======================================================================================================
Step 4 - Install Kubernetes

sudo apt-get install curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
=======================================================================================================
Step 5 - Add Software Repositories
sudo apt-add-repository "deb http://apt.kubernetes.io/kubernetes-xenial main"
error: 
// add space " " after <"deb http://apt.kubernetes.io/>this part in above command.

sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
=======================================================================================================
Step 6 - Kubernetes Installation Tools

sudo apt-get install kubeadm kubelet kubectl
sudo apt-mark hold kubeadm kubelet kubectl
Verify the installation with:
kubeadm version
================================================
Step 7 - Kubernetes Deployment
sudo swapoff –a
===========================================
Step 8 - Assign Unique Hostname for Each Server Node
sudo hostnamectl set-hostname <hostname>
==========================================================================================================================================
add loadbalancer ( create it on a jump post ) 
==========================================================================================================================================
NOW TO CONNECT MULTIPLE MASTER CREATE A LOAD BALANCER 
sudo apt-get install haproxy
ERROR
############################################################################################################################################
CHECK REGISTRY USING SUDO APT UPDATE IF IT SPECIFIES\
cd /etc/apt/sources.list.d 
remove repos in above directory rm -rf *

cd /opt/ 
sudo rm -rf sources.list
touch sources\.list
sudo add-apt-repository main
cat /etc/apt/sources.list check if repo is added
lsb_release -a

sudo apt show haproxy
sudo apt-get install haproxy
sudo haproxy -v
#############################################################################################################################################
CHANGES IN 
vi /etc/haproxy/haproxy.cfg
add your master ips 
-------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend fe-apiserver
    bind 0.0.0.0:6443
    mode tcp
    option tcplog
    default_backend be-apiserver
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend be-apiserver
    mode tcp
    option tcplog
    option tcp-check
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100

    server kastenmaster01 10.48.71.223:6443 check
    server kastenmaster02 10.48.71.239:6443 check
    server kastenmaster03 10.48.71.247:6443 check
-----------------------------------------------------------------------------------------------------------------------------------------------
==============================###############################vi /etc/haproxy/haproxy.cfg###############################==============================
------------------------------------------------------------------------------------------------------------------------------------------------
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon
	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private
	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend fe-apiserver
    bind 0.0.0.0:6443
    mode tcp
    option tcplog
    default_backend be-apiserver
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend be-apiserver
    mode tcp
    option tcplog
    option tcp-check
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    server k8smaster1 10.48.70.239:6443 check
    server k8smaster2 10.48.70.247:6443 check
    server k8smaster3 10.48.70.240:6443 check
------------------------------------------------------------------------------------------------------------------------------------------------
==============================###############################vi /etc/haproxy/haproxy.cfg###############################==============================




systemctl start haproxy.service
================================================================================================================================================
Step 9 - Initialize Kubernetes on Master Node
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=10.48.70.223:6443 --upload-certs
#--control-plane-endpoint=<ip of loadbalancer>:6443 




NOTE: make a note of OUTPUT of above command
Next, enter the following to create a directory for the cluster:
These commands will be available in the O/P of above command
[ mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config ]

RUN join command of master generate by kubeadm init command on the control-planes to join the cluster

Verify that everything is running and communicating
=================================================================================================================================================
Step 10 - Deploy Pod Network to Cluster
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

kubectl get pods --all-namespaces
========================================================================
Step 11 - Join the Worker Node to Cluster
the command to join the worker generate via <kubeadm init> command
===================================================================================

